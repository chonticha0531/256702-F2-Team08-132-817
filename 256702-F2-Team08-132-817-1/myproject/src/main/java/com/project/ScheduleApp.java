package com.project;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import javafx.util.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javafx.application.Platform;

public class ScheduleApp extends Application {
    private ListView<String> scheduleList;
    private Map<String, LocalDateTime> taskTimes = new HashMap<>();
    private DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("‡πÅ‡∏≠‡∏õ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤");

        Label titleLabel = new Label("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô");

        TextField taskInput = new TextField();
        taskInput.setPromptText("‡∏õ‡πâ‡∏≠‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°...");
        DatePicker datePicker = new DatePicker();
        TextField timeInput = new TextField();
        timeInput.setPromptText("‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ (HH:mm)");

        Button addButton = new Button("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°");
        HBox topRightBox = new HBox(addButton);
        topRightBox.setAlignment(Pos.TOP_RIGHT);

        scheduleList = new ListView<>();

        Button editButton = new Button("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°");
        Button deleteButton = new Button("‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°");
        HBox bottomButtonBox = new HBox(10, editButton, deleteButton);
        bottomButtonBox.setAlignment(Pos.CENTER);
        bottomButtonBox.setPadding(new Insets(10));

        addButton.setOnAction(e -> addTask(taskInput, datePicker, timeInput));
        editButton.setOnAction(e -> editTask());
        deleteButton.setOnAction(e -> deleteTask());

        VBox layout = new VBox(10, titleLabel, topRightBox, taskInput, datePicker, timeInput, scheduleList, bottomButtonBox);
        layout.setPadding(new Insets(20));

        Timeline timeline = new Timeline(new KeyFrame(Duration.seconds(1), e -> checkNotifications()));
        timeline.setCycleCount(Timeline.INDEFINITE);
        timeline.play();

        Scene scene = new Scene(layout, 400, 500);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void addTask(TextField taskInput, DatePicker datePicker, TextField timeInput) {
        String task = taskInput.getText();
        String date = datePicker.getValue() != null ? datePicker.getValue().toString() : "";
        String time = timeInput.getText();

        if (!task.isEmpty() && !date.isEmpty() && time.matches("\\d{2}:\\d{2}")) {
            String taskDetails = task + " - " + date + " " + time;
            scheduleList.getItems().add(taskDetails);
            taskTimes.put(taskDetails, LocalDateTime.parse(date + " " + time, formatter));

            taskInput.clear();
            timeInput.clear();
        }
    }

    private void editTask() {
        String selectedTask = scheduleList.getSelectionModel().getSelectedItem();
        if (selectedTask != null) {
            TextInputDialog dialog = new TextInputDialog(selectedTask.split(" - ")[0]);
            dialog.setTitle("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°");
            dialog.setHeaderText("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°");
            dialog.setContentText("‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà:");

            dialog.showAndWait().ifPresent(newTask -> {
                if (!newTask.isEmpty()) {
                    String oldTask = selectedTask;
                    String newTaskDetails = newTask + " - " + selectedTask.split(" - ")[1];

                    scheduleList.getItems().set(scheduleList.getSelectionModel().getSelectedIndex(), newTaskDetails);
                    LocalDateTime oldTime = taskTimes.remove(oldTask);
                    taskTimes.put(newTaskDetails, oldTime);
                }
            });
        }
    }

    private void deleteTask() {
        String selectedTask = scheduleList.getSelectionModel().getSelectedItem();
        if (selectedTask != null) {
            scheduleList.getItems().remove(selectedTask);
            taskTimes.remove(selectedTask);
        }
    }

    private void checkNotifications() {
        LocalDateTime now = LocalDateTime.now();
        System.out.println("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡πÄ‡∏ß‡∏•‡∏≤: " + now); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    
        Iterator<Map.Entry<String, LocalDateTime>> iterator = taskTimes.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry<String, LocalDateTime> entry = iterator.next();
            System.out.println("‚è∞ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: " + entry.getKey() + " -> " + entry.getValue()); // Debug ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
    
            if (entry.getValue().isBefore(now) || entry.getValue().isEqual(now)) {
                System.out.println("üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: " + entry.getKey()); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏£‡∏¥‡∏á
                showNotification(entry.getKey()); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                iterator.remove();
                scheduleList.getItems().remove(entry.getKey());
                break;
            }
        }
    }
    
private void showNotification(String task) {
    Platform.runLater(() -> {
        System.out.println("üì¢ ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û: " + task); // Debug

        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°");
        alert.setHeaderText("‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥");
        alert.setContentText("‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤: " + task);
        alert.showAndWait();
    });
}
    

    public static void main(String[] args) {
        launch(args);
    }
}
